@use "base_variables";

// Navbar

.nav-list {
    padding: 1.25rem 4rem;
    position: relative;

    // grid will allow us to use percentages of the viewport width instead of percentages of the vw unit.
    // percentages will mitigate the fixed margin issue.
    // it will also prevent a horizontal scrollbar from appearing?????
    // more so about fixed element size overflow than track size but ....   
    // good thoughts so far!

    // the use of vw for element margin in with a flex layout
    // ... will come back to bite us if a vertical scrollbar appears,
    // .. and if the viewport is too small to support the margin + other elements.
    // it will alter the layout from what the design displays, since a horizontal scrollbar may appear.
    // the margin isn't based on a percentage of the nav-list, it's based on a percentage of the viewport.
    // as the viewport shrinks, the margin will increase.
    // We can't use margin percentages of the navbar to take advantage of the inheritance heirarchy,
    //  ... as a percentage width here will calculate based on the <li> parent.
    // Thus, grid is the best option here. We can account for the field width + its percentage gap. Win win.
    // Plus, flexbox is a bit viral given its single directionality.

    --search-field-width: 28rem;

    display: grid;
    grid: 1fr / max-content max-content max-content;
    justify-content: space-between;
    
    @media screen and (max-width: base_variables.$breakpoint-md) {
        grid: 1fr / max-content max-content max-content;
        width: 100%;
        --search-field-width: 100%;
    }
    
    @media screen and (max-width: base_variables.$breakpoint-sm) {
        grid: ". logo logo" 1fr
              ". search-field account-info" 1fr
        / max-content max-content max-content;
        column-gap: 2rem;
        
        .account-info {
            grid-area: account-info;
        }
        .search {
            grid-area: search-field;
        }
        .logo {
            grid-area: logo;
            align-self: center;
            width: 100%;
            text-align: center;
        }
    }
    
    align-items: center;
    justify-items: right;

    /* fake borders so we can give them different linear gradients */
    &::before {
        content: "";

        position: absolute;
        top: 0;
        left: 0; // I guess by default, absolute elements account for relative parent's padding

        height: 2px;
        width: 100%;

        background: linear-gradient(#E9EAEC 0%, rgb(189 192 198 / 64%) 8%, rgb(189 192 198 / 64%) 92%, #E9EAEC 100%);
    }

    &::after {
        content: "";

        position: absolute;
        bottom: 0;
        left: 0; // I guess by default, absolute elements account for relative parent's padding
        // todo: read into default left value.

        height: 2px;
        width: 100%; // I guess the default width: auto; does not provide width to psuedo elements.
        // todo: read into width: auto; for psuedo elements

        background: linear-gradient(90deg, rgb(156 160 170 / 0.2) 0%, rgb(156 160 170 / 0.2) 12%, rgb(222 135 104 / 0.1) 13.82%, rgb(222 135 104 / 0.1) 22.2%, rgb(156 160 170 / 0.2) 24%, rgb(156 160 170 / 0.2) 31%, rgb(222 135 104 / 0.1) 33.14%, rgb(222 135 104 / 0.1) 66.12%, rgb(156 160 170 / 0.2) 68%, rgb(156 160 170 / 0.2) 71.33%, rgb(222 135 104 / 0.1) 73.11%, rgb(222 135 104 / 0.1) 86.84%, rgb(156 160 170 / 0.2) 89%);
    }

    .nav-item {
        &::marker {
            font-size: 0px;
        }
        
        &.search {
            @media screen and (max-width: base_variables.$breakpoint-md) {
                width: 100%;
            }
        }
    }

    #search-form {
        .icon-field-wrapper {
            position: relative;
            height: 3rem;
            
            .field-icon {
                position: absolute;
                // 27px by 24px
                width: 1.3rem;
                height: 1.25rem;
                left: 0.5rem;
                top: 50%; // move top face by 50% from the top of the pos-relative div
                transform: translate(1rem, -50%); // translate 50% of width up such that the icon is positioned relative to the center of itself by 50% from the top of the pos-relative div

                path {
                    fill: base_variables.$oranger;
                }
            }


            #search-field {
                height: 100%;
                width: var(--search-field-width);
                border-radius: 1rem;
                // user text
                color: base_variables.$oranger;

                border: 1px solid rgba(163, 44, 1, 0.24);
                background: linear-gradient(180deg, rgb(239 217 210 / 0.72) 0%, rgb(234 205 195 / 0.72) 100%);
                box-shadow: inset 0px 4px 4px rgb(240 67 5 / 0.24);
                
                font-size: 1.25rem;
                padding-left: 3.6875rem; // hold space for the icon

                &::placeholder {
                    color: base_variables.$oranger;
                }

                transition: .2s box-shadow, .4s border-color;

                &:focus {
                    border-color: hsl(from base_variables.$orange h s calc(l + 32));
                    outline: none; // override browser default
                    box-shadow: inset 0px 4px 4px rgb(240 67 5 / 0.24),
                                0 0 0 2px rgba(218, 151, 135, 0.24);
                }
                
                &:hover {
                    border-color: hsl(from base_variables.$orange h s calc(l + 32));
                }
            }
        }
    }

    .account-info {
        margin-left: auto;

        display: grid;
        grid: "username btn--options" auto "credits btn--options" auto / auto auto;

        @media screen and (max-width: base_variables.$breakpoint-md) {
            display: block;
        }
        
        column-gap: 1rem;

        /* use percentage margins? or use grid on the nav-list instead of flex w/ percentage inline-length columns âœ… */
        .username {
            @media screen and (max-width: base_variables.$breakpoint-md) {
                position: absolute;
                left: -200vw;
            }
        
            grid-area: username;
            align-self: end;
        }

        .credits {
            @media screen and (max-width: base_variables.$breakpoint-md) {
                position: absolute;
                left: -200vw;
            }
        
            grid-area: credits;
        }

        // relationship between width, aspect-ratio, and child svg with 100% w/h.
        // why does width sometimes not respect aspect ratio? maybe due to how svg scales weirdly.
        .btn--options {
            width: 3rem;
            aspect-ratio: 1 / 1;

            place-self: center;

            grid-area: btn--options;
            background: base_variables.$black;
            border-radius: base_variables.$border-radius-med;
            padding: 0.875rem;

            /* Hide browser default tooltip when an svg element with <title> is hovered over */
            /* Warning: disables event emission for the svg */
            svg {
                pointer-events: none;
                width: 100%;
                height: 100%;
                fill: base_variables.$white;
                /* remove whitespace underneath replaced element */
                vertical-align: bottom;

                path {
                    fill: base_variables.$white;
                }
            }

            transition: .2s background, .4s outline;
            outline: 2px solid transparent;
            outline-offset: -4px;
            
            &:hover {
                background: rgb(from base_variables.$black r g b / 98%);
                outline: 2px solid base_variables.$white;
            }

        }
    }
}

// Sidebar

.sidebar {
    height: 100%;
    width: min-content;
    position: relative;
    padding: 4rem;
    padding-bottom: 0; // not needed since the block elements will just flow along the block axis, and
                       // as the content currently is, it can't shrink any further in block length.

                       
    @media screen and (max-width: base_variables.$breakpoint-sm-sm) {
        display: none;
    }
    
    // right border
    &::after {
        content: "";

        position: absolute;
        right: 0;
        top: 0;

        height: 100%;
        width: 2px;

        background: linear-gradient(180deg, rgba(156, 160, 170, 0.064) 0%, rgba(156, 160, 170, 0.128) 16%, rgba(156, 160, 170, 0.2) 32%, rgba(222, 135, 104, 0.128) 48%, rgba(222, 135, 104, 0.128) 64%, rgba(156, 160, 170, 0.064) 80%);
    }

    .sidebar-navlist {
        margin-bottom: 4rem;

        .navlist-item {
            width: fit-content;

            &::marker {
                font-size: 0;
            }

            .item-link {
                display: flex;
                align-items: center; // don't stretch and cause poor vertical alignment for text with a smaller block length than the largest element in the line (the icon)
                gap: 0.625rem;
            }
        }

        .navlist-item:nth-child(n+2) {
            margin-top: 2rem;
        }
    }

    .recent-thread-list {
        margin-top: .75rem;
        /* Not sure why body's max-content column track inline length squishes this. Explicitly give max-content width to the recently viewed subreddit: */
        width: max-content;
        height: 14.75rem;
        
        scrollbar-gutter: auto;
        overflow-y: auto;
        scrollbar-color: base_variables.$black transparent;
        scrollbar-width: thin;

        .list__item {
            &::marker {
                font-size: 0px;
            }
        }
        
        .list__item:nth-child(n+2) {
            margin-top: .25rem;
        }

        .item__link {
            display: grid;
            /* all auto vs. all 1fr??? hmm.. what is fr based on here? is it auto + any other available space?
            why is there additional space when I use fr? maybe a glitch? */
            grid: "logo subreddit" auto
                  "logo thread-title" auto
                  / auto auto;
            
            border: 1px solid transparent;
            padding: .5rem;
            transition: .4s border-color;
            border-radius: .5rem;
            gap: .25rem .5rem;
            
            &:hover {
                border-color: hsl(from base_variables.$white h s calc(l - 32));
            }

            .thread__icon {
                width: 2rem;
                aspect-ratio: 1/1;
                grid-area: logo;
                align-self: center;
            }

            .thread__subreddit {
                grid-area: subreddit;
            }

            .thread__title {
                grid-area: thread-title;
                font-size: .75rem;
            }
        }
    }
}

// Cards

.card-list {
    display: flex;
    align-items: flex-end;
    gap: 2rem;
    
    @media screen and (max-width: base_variables.$breakpoint-lg) {
        flex-direction: column;
        align-items: flex-end;
        position: relative;
    }
    
    @media screen and (max-width: base_variables.$breakpoint-sm-l) {
        align-items: center;
    }
}

.card {
    padding: .75rem;
    border-radius: 1rem;
    border: 1px solid rgb(19 20 22 / 32%);
    background: #E9EAEC;
}

.card--thread-card {
    margin-left: 1rem;
    margin-top: 2rem;
    width: 40rem;
    
    @media screen and (max-width: base_variables.$breakpoint-lg) {
        margin-left: 0;
        width: 100%;
    }

    .publication-info {
        display: grid;
        grid: "icon subreddit published" 1fr "icon author ." 1fr / auto auto auto;
        column-gap: .5rem;
        row-gap: .25rem;
        width: fit-content;

        .icon {
            grid-area: icon;
        }

        .subreddit {
            grid-area: subreddit;
        }

        .published {
            grid-area: published;
            font-size: .75rem;
            color: rgb(14 17 27 / 56%);
            align-self: center;
            
            /*
               An inherited value takes effect for an element
               only if no other style declaration has been
               applied directly to the element.
               
               A style exists in the base to color all elements black.
               Thus, we must override time's black color to make it inherit from published.
            */
            time {
                color: inherit;
            }
        }

        .author {
            grid-area: author;
            font-size: .75rem;
        }
    }

    .card__title,
    .card__title+* {
        margin-top: .5rem;
    }

    .card__title {
        font-size: 1.5rem;
    }

    .social-buttons {
        margin-top: .75rem;
        display: flex;
        gap: 1rem;
        align-items: center;
        
        /*
            An inherited value takes effect for an element
            only if no other style declaration has been
            applied directly to the element.
            
            A style exists in the base to color all elements black.
            Thus, we must override the nested paragraph's black color to make it inherit from social-buttons.
        */
        p {
            color: inherit;
            line-height: 1.5; // i do not know why we need this to center the text within its content block...
        }
        
        .btn--like,
        .btn--dislike {
            display: flex;
            gap: .75rem;
        }
    }
}

.card--thread-options {
    display: grid;
    grid: "credits badge" 1fr
          "btn-share btn-share" 1fr
          "btn-buy btn-sell" 1fr
          / 1fr 1fr;
    place-items: center;
    gap: 1.5rem .75rem;
    
    @media screen and (max-width: base_variables.$breakpoint-lg) {
        width: fit-content;
        position: absolute;
        right: 1rem;
        bottom: -8.5rem;
    }
    
    @media screen and (max-width: base_variables.$breakpoint-sm-l) {
        position: static;
    }
    
    @media screen and (max-width: base_variables.$breakpoint-sm-sm) {
        width: 100%;
    }
    
    .credit-cost {
        grid-area: credits;
        font-size: 1.25rem;
    }
    
    .badge--growth {
        grid-area: badge;
        position: relative;
        
        .icon-wrapper {
            position: absolute;
            width: 2rem;
            height: 100%;
            border-radius: 0.375rem;
            background: #0B6F1A;
            
            display: flex;
            justify-content: center;
            align-items: center;
            
            .icon--growth {
                fill: #2CC944;
                width: 1rem;
            }
        }
        
        .growth__amount {
            width: fit-content;
            padding: 0 0.75rem 0 2.5rem;
            background: #8DE29A;
            color: #1D862D;
            border-radius: 0.375rem;
        }
    }
    
    .btn--share {
        display: flex;
        align-items: center;
        justify-content: space-between;
        column-gap: 1.5rem;
        padding: .25rem .75rem .25rem 1rem;
        width: 100%;
        border-radius: .75rem;
        background: #E0E0E0;
        border: 1px solid rgb(14 17 27 / 16%);
        grid-area: btn-share;
        
        transition: .2s scale ease-out;
        &:hover {
            scale: 1.05;
        }
    }
    
    .btn--buy {
        grid-area: btn-buy;

        color: #ECEDEE;
        background: base_variables.$orange;
        
        border-radius: 1rem;
        padding: .5rem 2.5rem;
        
        transition: .2s background-color;
        &:hover {
            background: hsl(from base_variables.$orange h s calc(l - 4));
        }
    }
    
    .btn--sell {
        grid-area: btn-sell;
        
        --bg-color: hsl(8, 89%, 42%);
        
        color: #ECEDEE;
        background: var(--bg-color);
        
        border-radius: 1rem;
        padding: .5rem 2.5rem;
        
        transition: .2s background-color;
        &:hover {
            background: hsl(from var(--bg-color) h s calc(l - 4));
        }
    }
}

.underline-hover-no-svg {
    > *:not(svg) {
        position: relative;
    }
    
    > *:not(svg)::after {
        z-index: -1;
        position: absolute;
        bottom: .1em;
        border-radius: .5rem;
        left: 0;
        content: "";
        height: 2px;
        background: base_variables.$black;
        width: 0;
        transition: .2s width ease-out, .2s height ease-out;
    }
    
    &:hover {
        > *:not(svg)::after {
            width: 100%;
        }
    }
}

.underline-hover {
    position: relative;
    &::after {
        z-index: -1;
        position: absolute;
        bottom: .1em;
        border-radius: .5rem;
        left: 0;
        content: "";
        height: 2px;
        background: base_variables.$black;
        width: 0;
        transition: .2s width ease-out, .2s height ease-out;
    }
    &:hover {
        &::after {
            width: 100%;
        }
    }
}

.underline-hover--orange {
    &::after {
        background: base_variables.$orange;
    }
}