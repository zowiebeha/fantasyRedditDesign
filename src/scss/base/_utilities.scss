@use "base_variables";

// Screen reader utilities
.sr-only {
    position: absolute;
    left: -100vw;
}

// Text utilities
.text-orange {
    color: base_variables.$color-orange;
}

// A psuedo-element underline that will animate in length to become visible when
// ... the target element is hovered:
.underline-hover {
    position: relative;
    
    &::after {
        content: "";
        
        
        position: absolute;
        bottom: .1em;
        left: 0; // position left otherwise ::after will appear after the target element's contents
        // z-index: -1; // why do we need this?
        
        background: base_variables.$color-black;
        border-radius: .5rem;
        
        transition: .2s width ease-out, .2s height ease-out;
        height: 2px;
        width: 0;
    }
    &:hover {
        &::after {
            width: 100%;
        }
    }
}

// A copy of the above effect (in practice we usually do this for <a> anchors),
// ... but applied to non-<svg> nodes only such that a hyperlink that contains an icon + text will
// ... only have its text underlined upon hover. Note that text nodes will have no effect; a <span> or similar flow element is required for text.

// <a> <span>Click to view profile</span> <svg class="icon icon--external">...</svg></a>
.underline-hover-minus-svg {
    > *:not(svg) {
        position: relative;
    }
    
    > *:not(svg)::after {
        content: "";
        // z-index: -1; // do we need this?
        position: absolute;
        bottom: .1em;
        left: 0;
        
        background: base_variables.$color-black;
        border-radius: .5rem;
        
        transition: .2s width ease-out, .2s height ease-out;
        height: 2px;
        width: 0;
    }
    
    &:hover {
        > *:not(svg)::after {
            width: 100%;
        }
    }
}

// Color the psuedo-element orange
.underline-hover--orange {
    &::after {
        background: base_variables.$color-orange;
    }
}

// Position utilities
.pos-relative {
    position: relative;
}

// Length utilities
.h-100 {
    height: 100%;
}

// Responsive design utilities

// Hide element on large screen widths that are greater than or equal to `$breakpoint-md`
.hide-when-gte-md {
    @media screen and (min-width: base_variables.$breakpoint-md) {
        display: none;
    }
}

// Hide element on small screen widths that are smaller than or equal to `$breakpoint-xsm`
.hide-when-lte-xsm {
    @media screen and (max-width: base_variables.$breakpoint-xsm) {
        display: none;
    }
}